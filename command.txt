pwd - показывает текущее расположение
cd ~  - переход в домашнюю дериторию
ls - Вывести содержимое директории
		ls ~ выведет содержимое домашней директории вне зависимости от того, что показывает pwd. А ls .. покажет содержимое родительской директории.
		
cd (от англ. change directory — «сменить директорию»).
		cd github # переходим в папку github
		cd "Фотографии с дня рождения" -если есть пробелы используем кавычки 
		cd .. # переходим на уровень выше
		cd . # переходим в текущую директорию
		cd github/open-source-project # переходим через несколько директорий
		
Создание копирование и перемещение

touch my-new-file.txt # создали файл my-new-file.txt 
		 команда touch ../../file.txt создаст файл file.txt на две папки выше по иерархии. 
		 если вы находитесь в директории projects/git/hello, команда touch ../../file.txt создаст файл по такому пути: projects/file.txt.
		 
mkdir new-dir # создали директорию new-dir 
		$ mkdir -p dir1/dir-inside/dir-deeper-inside # создали папку dir-deeper-inside в папке dir-inside, которая находится в папке dir1 с помощью флага -p
		можно использовать команды вместе с символом домашней директории (~) или родительской директории (..).
		команда mkdir ~/my-git-projects создаст папку my-git-projects внутри домашней директории.

cp Копирование файлов 
		$ cp что_копируем куда_копируем
		$ cp index.html src/ # скопировали index.html в папку src 
		
		$ cp что_копируем что_копируем что_копируем куда_копируем
		$ cp index.html style.css script.js src/ # скопировали три файла (index.html, style.css и script.js) в папку src
		
mv Перемещение файлов и папок
		$ mv table.csv ./very-important-files # сначала указываем имя файла, который хотим переместить, потом путь — куда перемещаем
		
cat - Чтение файлов  (от англ. concatenate and print — «объединить и распечатать») только текстовые файлы
		cat myfile.txt # распечатали содержимое файла myfile.txt
		
rm, rmdir, rm -r  удаление файлов и папок
		$ rm example.txt # удалили файл example.txt из текущей папки
		$ rmdir images # команда удалит папку images из текущей директории,                # если папка images пуста если в ней есть файлы Directory not empty
		$ rm -r images # удалили папку images со всем её содержимым из текущей директории
		
		
выполнение сразу несколько команд
		$ mkdir second-project && cd second-project && touch index.html style.css
		# создаём папку second-project,# переходим в папку second-project# и создаём в ней два файла: index.html и style.css 
		
перемещение быстрое
		$ cd c:/ # переместились в корневую директорию
$ ls
Documents and Settings/     Windows/
Program Files/              Users/
Program Files (x86)/

автозаполнение
		$ cd /Users/ # перешли в папку Users
		$ cd U[Tab] # ввели первую букву имени пользователя и нажали Tab # имя папки Username подставится автоматически
		
просмотр вариантов
		$ cd ~/[Tab] # вывели список директорий, чтобы понять, куда переходить
Applications/  Downloads/     Library/       Parallels/     Public/        diagrams/  



Навигация
pwd (от англ. print working directory, «показать рабочую папку») — покажи, в какой я папке;
ls (от англ. list directory contents, «отобразить содержимое директории») — покажи файлы и папки в текущей папке;
ls -a — покажи также скрытые файлы и папки, названия которых начинаются с символа .;
cd first-project (от англ. change directory, «сменить директорию») — перейди в папку first-project;
cd first-project/html — перейди в папку html, которая находится в папке first-project;
cd .. — перейди на уровень выше, в родительскую папку;
cd ~ — перейди в домашнюю директорию (/Users/Username);
cd / — перейди в корневую директорию.
Работа с файлами и папками
Создание
touch index.html (англ. touch, «коснуться») — создай файл index.html в текущей папке;
touch index.html style.css script.js — если нужно создать сразу несколько файлов, можно напечатать их имена в одну строку через пробел;
mkdir second-project (от англ. make directory, «создать директорию») — создай папку с именем second-project в текущей папке.
Копирование и перемещение
cp file.txt ~/my-dir (от англ. copy, «копировать») — скопируй файл в другое место;
mv file.txt ~/my-dir (от англ. move, «переместить») — перемести файл или папку в другое место.
Чтение
cat file.txt (от англ. concatenate and print, «объединить и распечатать») — распечатай содержимое текстового файла file.txt.
Удаление
rm about.html (от англ. remove, «удалить») — удали файл about.html;
rmdir images (от англ. remove directory, «удалить директорию») — удали папку images;
rm -r second-project (от англ. remove, «удалить» + recursive, «рекурсивный») — удали папку second-project и всё, что она содержит.
Полезные возможности
Команды необязательно печатать и выполнять по очереди. Можно указать их списком — разделить двумя амперсандами (&&).
У консоли есть собственная память — буфер с несколькими последними командами. По ним можно перемещаться с помощью клавиш со стрелками вверх (↑) и вниз (↓).
Чтобы не вводить название файла или папки полностью, можно набрать первые символы имени и дважды нажать Tab. Если файл или папка есть в текущей директории, командная строка допишет путь сама.
Например, вы находитесь в папке dev. Начните вводить cd first и дважды нажмите Tab. Если папка first-project есть внутри dev, командная строка автоматически подставит её имя. Останется только нажать Enter.

Создания локального репозитория

$ cd ~/dev/first-project # перешли в нужную папку

$ git init # создали репозиторий 

Удаление репозитория 

$ cd <папка с репозиторием> # перешли в папку

$ rm -rf .git # удалили подпапку .git 


git add - Подготовить файлы к сохранению

			Команда git add позволяет подготовить файл к сохранению.
			Команда git add --all подготовит к сохранению сразу все файлы.
			С помощью git add . можно добавить в репозиторий текущую папку со всеми файлами.
			
			
git commit Выполнить коммит
		git commit -m "делаем запись"  написание коммита и его сохранение 
		

git log просмотреть все коммиты


поключение к github 

		$ cd ~/dev/first-project
		$ git remote add origin git@github.com:%ИМЯ_АККАУНТА%/first-project.git
		
		Команде необходимо передать два параметра: имя удалённого репозитория и его URL. В качестве имени используйте слово origin. А URL вы скопировали со страницы удалённого репозитория.
		
		проверить подюкчение 
		$ git remote -v
		origin    git@github.com:%ИМЯ_АККАУНТА%/%ИМЯ-ПРОЕКТА%.git (fetch)
		origin    git@github.com:%ИМЯ_АККАУНТА%/%ИМЯ-ПРОЕКТА%.git (push)
		
		
проверка наличия ключей 


$ ls -la .ssh/ # вывели список созданных ключей

создание ключей

		$ ssh-keygen -t ed25519 -C "электронная почта, к которой привязан ваш аккаунт на GitHub"
		
		$ ssh-keygen -t rsa -b 4096 -C "электронная почта, к которой привязан ваш аккаунт на GitHub"
		
копирование ключей

		на маке
		# скопировать содержимое ключа в буфер обмена:
		$ pbcopy < ~/.ssh/id_rsa.pub
		# для ed25519:
		$ pbcopy < ~/.ssh/id_ed25519.pub
		
		на винде
		# скопировать содержимое ключа в буфер обмена:
		$ clip < ~/.ssh/id_rsa.pub
		# для ed25519:
		$ clip < ~/.ssh/id_ed25519.pub
		
проверка подключения

		$ ssh -T git@github.com
		
		
Можно вызвать не только полный лог, но и сокращённый — это делается командой git log --oneline.
выход с помощью q



Статусы untracked/tracked, staged и modified
untracked (англ. «неотслеживаемый»)
staged (англ. «подготовленный») также называют index (англ. «каталог») или cache (англ. «кеш»),
tracked (англ. «отслеживаемый»)
modified (англ. «изменённый»)

при выполнении команды git push получаю сообщение
 ! [rejected]        master -> master (fetch first)
error: failed to push some refs to 'github.com:OophionN/study_git.git'
hint: Updates were rejected because the remote contains work that you do
hint: not have locally. This is usually caused by another repository pushing
hint: to the same ref. You may want to first integrate the remote changes
hint: (e.g., 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.

Это сообщение означает, что в удаленном репозитории есть изменения, которых у вас нет локально. Git предотвращает отправку изменений на удаленный репозиторий, чтобы избежать возможных конфликтов. Чтобы решить эту проблему, вам нужно интегрировать удаленные изменения в ваш локальный репозиторий перед выполнением команды git push.

Вам нужно выполнить два шага:

Обновление локального репозитория: Используйте команду git pull, чтобы получить последние изменения из удаленного репозитория и объединить их с вашим локальным кодом. Команда git pull автоматически скачивает изменения и объединяет их с вашим текущим рабочим состоянием.

		git pull origin master

Здесь origin - это имя удаленного репозитория, а master - это имя ветки. Вы можете заменить master на имя вашей текущей ветки, если она отличается.

Исправление возможных конфликтов: После выполнения git pull, Git автоматически попытается объединить изменения. Если возникнут конфликты, Git сообщит вам об этом. Вам нужно будет разрешить эти конфликты в вашем коде вручную. Откройте файлы, помеченные как "CONFLICT" в них, разрешите конфликты, сохраните изменения и сделайте коммит.

После того как вы разрешили все конфликты и сделали коммит, вы можете выполнить git push, чтобы отправить обновленные изменения на удаленный репозиторий.

		git push origin master

Если у вас есть права на запись в удаленный репозиторий, команда git push должна успешно выполниться, и ваши изменения будут отправлены на GitHub.

через Visual Studio Code (VS Code) работать проще 

HEAD -- это голова.
Коммит -- это всему голова.
Статусы файлов:
<тут пустая строка!>

```mermaid
%% описание схемы
```
<и тут пустая строка!> 

Памятка по комитам

Блоки кода в маркдауне начинаются и заканчиваются тремя символами ```. После первых трёх ``` можно указать, какой именно код будет внутри блока. Например: ```mermaid , ```bash, ```python, ```javascript и так далее. Если ничего не указать, GitHub будет считать весь код простым текстом.
💡 Перед блоком и после него нужны пустые строки, иначе GitHub может не понять, что это блок кода.
Два символа %% обозначают в mermaid строку-комментарий.
Чтобы сделать схему, нужно указать формат: graph LR. Graph — это простейший тип схем; для шпаргалки его будет достаточно.
Чтобы добавить элементы и связи (стрелки), используют строки вида A --> B. Такая строка создаст квадратные блоки А и B и соединит их стрелкой.

Дополнительно можно указывать текст на стрелке. Например, так: A -- "text" --> B.

Добавление файлов в комит и корректировка сообщения 

$ git add common.css
# добавили файл common.css в список на коммит как обычно

# но вместо команды commit -m '...'
# будет:
$ git commit --amend --no-edit

$ git log --oneline
8340eb2 Добавить главную страницу
# коммит в истории всё ещё один (но у него новый хеш) 

Изменить сообщение коммита — git commit --amend -m "Новое сообщение"

$ git commit --amend -m "Добавить главную страницу и стили"
$ git log --oneline
a31fa24 Добавить главную страницу и стили 

Вот как выйти из Vim:
Нажмите клавишу Esc.
Наберите последовательность символов :qa!.
Нажмите Enter.
Для запуска учебника на русском языке достаточно выполнить команду vimtutor ru. Без ru запустится английская версия.


Откаты на прошлые состояния

Выполнить unstage изменений — git restore --staged <file>
пример
$ touch example.txt # создали ненужный файл
$ git add example.txt # добавили его в staged

$ git status # проверили статус
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        new file:   example.txt

$ git restore --staged example.txt
$ git status # проверили статус

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        example.txt

no changes added to commit (use "git add" and/or "git commit -a")
# файл example.txt из staged вернулся обратно в untracked 

Чтобы «сбросить» все файлы из staged обратно в untracked/modified, можно воспользоваться командой git restore --staged .: она сбросит всю текущую папку (.).


«Откатить» коммит — git reset --hard <commit hash>

$ git log --oneline # хеш можно найти в истории
7b972f5 (HEAD -> master) style: добавить комментарии, расставить отступы
b576d89 feat: добавить массив Expenses и цикл для добавления трат # вот сюда и вернёмся
4b58962 refactor: разделить analyzeExpenses() на countSum() и saveExpenses()

$ git reset --hard b576d89
# теперь мы на этом коммите
HEAD is now at b576d89 feat: добавить массив Expenses и цикл для добавления трат 

«Откатить» изменения, которые не попали ни в staging, ни в коммит, — git restore <file>

# случайно изменили файл example.txt
$ git status
On branch main
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
          modified:   example.txt

$ git restore example.txt
$ git status
On branch main
nothing to commit, working tree clean 

копирование репозитория 

git clone git@github.com:yandex-praktikum/git-branch-case.git



памятка  
Команда git restore --staged <file> переведёт файл из staged обратно в modified или untracked.
Команда git reset --hard <commit hash> «откатит» историю до коммита с хешем <hash>. Более поздние коммиты потеряются!
Команда git restore <file> «откатит» изменения в файле до последней сохранённой (в коммите или в staging) версии.

Просмотр разницы в файлах

$ git diff teremok.txt
diff --git a/teremok.txt b/teremok.txt
index c2a33f8..e77226b 100644
--- a/teremok.txt
+++ b/teremok.txt
@@ -1,2 +1,2 @@
-# Теремок стоит, и в нём:
-# никого нет
\ No newline at end of file
+Теремок стоит, и в нём:
+Мышка-норушка
\ No newline at end of file



Самое важное git diff выводит в конце:
красный цвет строки никого нет значит, что эта строка была удалена;
зелёный цвет строки Мышка-норушка значит, что она была добавлена.
Не все консоли умеют выводить цвета, поэтому строки помечаются не только цветом, но и знаком - или +. Минус — это удалённые строки, плюс — это добавленные.
Коротко разберём остальные строки вывода команды:
Первые две строки (diff --git a/... b/... и index 901da07..ac459e1 100644) — это низкоуровневая техническая информация. Мы не будем на ней останавливаться.
Строки --- a/teremok.txt и +++ b/teremok.txt говорят, что дальше будет выведен результат сравнения файлов a/teremok.txt и b/teremok.txt — исходной и текущей версий.
Строка @@ -1,2 +1,2 @@ сообщает, какие строки файла попали в сравнение. Выражение 1,2 (неважно, с плюсом или с минусом) говорит, что были использованы две строки, начиная с первой. Если бы было, например, написано +15,7, это значило бы, что в сравнении участвуют 
7
7 строк, начиная с 
15
15-й.

Выражение со знаком минус (-1,2) относится к «оригинальной» версии файла (a/teremok.txt), а со знаком плюс (+1,2) — к «изменённой» (b/teremok.txt).

Команда git diff сравнит последнюю закоммиченную версию файла с той, что находится в состоянии modified.
Команда git diff --staged покажет изменения в staged-файлах относительно последних закоммиченных версий.


дополение файла

$ echo "Привет!"
Привет! - выводит просто текст на экран

$ cat file.txt
Первая строка файла

$ echo "Вторая строка файла" >> file.txt - дописывает в файл текст
$ cat file.txt
Первая строка файла
Вторая строка файла 

Одинарный символ > тоже перенаправит вывод команды в файл, но перед этим сотрёт содержимое файла, то есть перезапишет файл целиком.



Общая шпаргалка

Шпаргалка. Начало работы с Git
Чтобы вам было проще запомнить все команды, о которых шла речь в этом модуле, мы собрали их в одном месте.
Инициализация репозитория
git init (от англ. initialize, «инициализировать») — инициализируй репозиторий.
Синхронизация локального и удалённого репозиториев
git remote add origin (от англ. remote, «удалённый» + add, «добавить») — привяжи локальный репозиторий к удалённому с URL https://github.com/YandexPracticum/first-project.git;
git remote -v (от англ. verbose, «подробный») — проверь, что репозитории действительно связались;
git push -u origin main (от англ. push, «толкать») — в первый раз загрузи все коммиты из локального репозитория в удалённый с названием origin.
💡 Ваша ветка может называться master, а не main. Подправьте команду, если это необходимо.
git push (от англ. push, «толкать») — загрузи коммиты в удалённый репозиторий после того, как он был привязан с помощью флага -u.
Подготовка файла к коммиту
git add todo.txt (от англ. add, «добавить») — подготовь файл todo.txt к коммиту;
git add --all (от англ. add, «добавить» + all, «всё») — подготовь к коммиту сразу все файлы, в которых были изменения, и все новые файлы;
git add . — подготовь к коммиту текущую папку и все файлы в ней.
Создание и публикация коммита
git commit -m "Комментарий к коммиту." (от англ. commit, «совершать», фиксировать» + message, «сообщение») — сделай коммит и оставь комментарий, чтобы было проще понять, какие изменения сделаны;
git push (от англ. push, «толкать») — добавь изменения в удалённый репозиторий.
Просмотр информации о коммитах
git log (от англ. log, «журнал [записей]») — выведи подробную историю коммитов;
git log --oneline (от англ. log, «журнал [записей]» + oneline, «одной строкой») — покажи краткую информацию о коммитах: сокращённый хеш и сообщение.
Просмотр состояния файлов
git status (от англ. status, «статус», «состояние») — покажи текущее состояние репозитория.
Добавление изменений в последний коммит
git commit --amend --no-edit (от англ. amend, «исправить») — добавь изменения к последнему коммиту и оставь сообщение прежним;
git commit --amend -m "Новое сообщение" — измени сообщение к последнему коммиту на Новое сообщение.
💡 Выйти из редактора Vim: нажать Esc, ввести :qa!, нажать Enter.
«Откат» файлов и коммитов
git restore --staged hello.txt (от англ. restore, «восстановить») — переведи файл hello.txt из состояния staged обратно в untracked или modified;
git restore hello.txt — верни файл hello.txt к последней версии, которая была сохранена через git commit или git add;
git reset --hard b576d89 (от англ. reset, «сброс», «обнуление» + hard, «суровый») — удали все незакоммиченные изменения из staging и «рабочей зоны» вплоть до указанного коммита.
Просмотр изменений
git diff (от англ. difference, «отличие», «разница») — покажи изменения в «рабочей зоне», то есть в modified-файлах;
git diff a9928ab 11bada1 — выведи разницу между двумя коммитами;
git diff --staged — покажи изменения, которые добавлены в staged-файлах.



получение информации о ветках 

		git branch

Создание веток

		git branch <название_ветки>
		
Переключиться на другую ветку — 
		
		git checkout
		git checkout -b bugfix/fix-branch # создали ветку и сразу на неё переключились
		
Сравнить ветки — 

		git diff <название_ветки1> <название_ветки2>
		$ git diff main 2ea56ab # вывод будет такой же, как при использовании git diff main feature/diff
		
git diff может сравнивать ветки по их названиям. 
Например, команда git diff main feature/my-feature выведет разницу между основной веткой и веткой feature/my-feature.

Git поддерживает суффикс навигации ~. С его помощью можно сослаться на предыдущие коммиты. 

Например, если вы находитесь в ветке main и хотите вывести разницу между тем коммитом, который был три коммита назад, и текущим, нужно выполнить git diff main~3 main.


Объединяем и удаляем ветки

Выполнить слияние — 
			git merge <название_ветки>
			
пример конфликта 

PC_Maks@F15 MINGW64 ~/dev/git-merge-case (main)
$ git merge change-one
Merge made by the 'ort' strategy.
 file.txt | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

PC_Maks@F15 MINGW64 ~/dev/git-merge-case (main)
$ git merge change-two
Auto-merging file.txt
CONFLICT (content): Merge conflict in file.txt
Automatic merge failed; fix conflicts and then commit the result.




удаление веток на гитхабе

$ git push --delete origin OophionN-patch-2
To github.com:dataMasterskaya/DreamParser.git
 - [deleted]         OophionN-patch-2


Отслеживание ветки
$ git branch --set-upstream-to=origin/OophionN
