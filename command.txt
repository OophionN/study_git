pwd - показывает текущее расположение
cd ~  - переход в домашнюю дериторию
ls - Вывести содержимое директории
		ls ~ выведет содержимое домашней директории вне зависимости от того, что показывает pwd. А ls .. покажет содержимое родительской директории.
		
cd (от англ. change directory — «сменить директорию»).
		cd github # переходим в папку github
		cd "Фотографии с дня рождения" -если есть пробелы используем кавычки 
		cd .. # переходим на уровень выше
		cd . # переходим в текущую директорию
		cd github/open-source-project # переходим через несколько директорий
		
Создание копирование и перемещение

touch my-new-file.txt # создали файл my-new-file.txt 
		 команда touch ../../file.txt создаст файл file.txt на две папки выше по иерархии. 
		 если вы находитесь в директории projects/git/hello, команда touch ../../file.txt создаст файл по такому пути: projects/file.txt.
		 
mkdir new-dir # создали директорию new-dir 
		$ mkdir -p dir1/dir-inside/dir-deeper-inside # создали папку dir-deeper-inside в папке dir-inside, которая находится в папке dir1 с помощью флага -p
		можно использовать команды вместе с символом домашней директории (~) или родительской директории (..).
		команда mkdir ~/my-git-projects создаст папку my-git-projects внутри домашней директории.

cp Копирование файлов 
		$ cp что_копируем куда_копируем
		$ cp index.html src/ # скопировали index.html в папку src 
		
		$ cp что_копируем что_копируем что_копируем куда_копируем
		$ cp index.html style.css script.js src/ # скопировали три файла (index.html, style.css и script.js) в папку src
		
mv Перемещение файлов и папок
		$ mv table.csv ./very-important-files # сначала указываем имя файла, который хотим переместить, потом путь — куда перемещаем
		
cat - Чтение файлов  (от англ. concatenate and print — «объединить и распечатать») только текстовые файлы
		cat myfile.txt # распечатали содержимое файла myfile.txt
		
rm, rmdir, rm -r  удаление файлов и папок
		$ rm example.txt # удалили файл example.txt из текущей папки
		$ rmdir images # команда удалит папку images из текущей директории,                # если папка images пуста если в ней есть файлы Directory not empty
		$ rm -r images # удалили папку images со всем её содержимым из текущей директории
		
		
выполнение сразу несколько команд
		$ mkdir second-project && cd second-project && touch index.html style.css
		# создаём папку second-project,# переходим в папку second-project# и создаём в ней два файла: index.html и style.css 
		
перемещение быстрое
		$ cd c:/ # переместились в корневую директорию
$ ls
Documents and Settings/     Windows/
Program Files/              Users/
Program Files (x86)/

автозаполнение
		$ cd /Users/ # перешли в папку Users
		$ cd U[Tab] # ввели первую букву имени пользователя и нажали Tab # имя папки Username подставится автоматически
		
просмотр вариантов
		$ cd ~/[Tab] # вывели список директорий, чтобы понять, куда переходить
Applications/  Downloads/     Library/       Parallels/     Public/        diagrams/  



Навигация
pwd (от англ. print working directory, «показать рабочую папку») — покажи, в какой я папке;
ls (от англ. list directory contents, «отобразить содержимое директории») — покажи файлы и папки в текущей папке;
ls -a — покажи также скрытые файлы и папки, названия которых начинаются с символа .;
cd first-project (от англ. change directory, «сменить директорию») — перейди в папку first-project;
cd first-project/html — перейди в папку html, которая находится в папке first-project;
cd .. — перейди на уровень выше, в родительскую папку;
cd ~ — перейди в домашнюю директорию (/Users/Username);
cd / — перейди в корневую директорию.
Работа с файлами и папками
Создание
touch index.html (англ. touch, «коснуться») — создай файл index.html в текущей папке;
touch index.html style.css script.js — если нужно создать сразу несколько файлов, можно напечатать их имена в одну строку через пробел;
mkdir second-project (от англ. make directory, «создать директорию») — создай папку с именем second-project в текущей папке.
Копирование и перемещение
cp file.txt ~/my-dir (от англ. copy, «копировать») — скопируй файл в другое место;
mv file.txt ~/my-dir (от англ. move, «переместить») — перемести файл или папку в другое место.
Чтение
cat file.txt (от англ. concatenate and print, «объединить и распечатать») — распечатай содержимое текстового файла file.txt.
Удаление
rm about.html (от англ. remove, «удалить») — удали файл about.html;
rmdir images (от англ. remove directory, «удалить директорию») — удали папку images;
rm -r second-project (от англ. remove, «удалить» + recursive, «рекурсивный») — удали папку second-project и всё, что она содержит.
Полезные возможности
Команды необязательно печатать и выполнять по очереди. Можно указать их списком — разделить двумя амперсандами (&&).
У консоли есть собственная память — буфер с несколькими последними командами. По ним можно перемещаться с помощью клавиш со стрелками вверх (↑) и вниз (↓).
Чтобы не вводить название файла или папки полностью, можно набрать первые символы имени и дважды нажать Tab. Если файл или папка есть в текущей директории, командная строка допишет путь сама.
Например, вы находитесь в папке dev. Начните вводить cd first и дважды нажмите Tab. Если папка first-project есть внутри dev, командная строка автоматически подставит её имя. Останется только нажать Enter.

Создания локального репозитория

$ cd ~/dev/first-project # перешли в нужную папку

$ git init # создали репозиторий 

Удаление репозитория 

$ cd <папка с репозиторием> # перешли в папку

$ rm -rf .git # удалили подпапку .git 


git add - Подготовить файлы к сохранению

			Команда git add позволяет подготовить файл к сохранению.
			Команда git add --all подготовит к сохранению сразу все файлы.
			С помощью git add . можно добавить в репозиторий текущую папку со всеми файлами.
			
			
git commit Выполнить коммит
		git commit -m "делаем запись"  написание коммита и его сохранение 
		

git log просмотреть все коммиты


поключение к github 

		$ cd ~/dev/first-project
		$ git remote add origin git@github.com:%ИМЯ_АККАУНТА%/first-project.git
		
		Команде необходимо передать два параметра: имя удалённого репозитория и его URL. В качестве имени используйте слово origin. А URL вы скопировали со страницы удалённого репозитория.
		
		проверить подюкчение 
		$ git remote -v
		origin    git@github.com:%ИМЯ_АККАУНТА%/%ИМЯ-ПРОЕКТА%.git (fetch)
		origin    git@github.com:%ИМЯ_АККАУНТА%/%ИМЯ-ПРОЕКТА%.git (push)
		
		
проверка наличия ключей 


$ ls -la .ssh/ # вывели список созданных ключей

создание ключей

		$ ssh-keygen -t ed25519 -C "электронная почта, к которой привязан ваш аккаунт на GitHub"
		
		$ ssh-keygen -t rsa -b 4096 -C "электронная почта, к которой привязан ваш аккаунт на GitHub"
		
копирование ключей

		на маке
		# скопировать содержимое ключа в буфер обмена:
		$ pbcopy < ~/.ssh/id_rsa.pub
		# для ed25519:
		$ pbcopy < ~/.ssh/id_ed25519.pub
		
		на винде
		# скопировать содержимое ключа в буфер обмена:
		$ clip < ~/.ssh/id_rsa.pub
		# для ed25519:
		$ clip < ~/.ssh/id_ed25519.pub
		
проверка подключения

		$ ssh -T git@github.com
		
Можно вызвать не только полный лог, но и сокращённый — это делается командой git log --oneline.
выход с помощью q
		
		
Статусы untracked/tracked, staged и modified
untracked (англ. «неотслеживаемый»)
staged (англ. «подготовленный») также называют index (англ. «каталог») или cache (англ. «кеш»),
tracked (англ. «отслеживаемый»)
modified (англ. «изменённый»)

при выполнении команды git push получаю сообщение
 ! [rejected]        master -> master (fetch first)
error: failed to push some refs to 'github.com:OophionN/study_git.git'
hint: Updates were rejected because the remote contains work that you do
hint: not have locally. This is usually caused by another repository pushing
hint: to the same ref. You may want to first integrate the remote changes
hint: (e.g., 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.

Это сообщение означает, что в удаленном репозитории есть изменения, которых у вас нет локально. Git предотвращает отправку изменений на удаленный репозиторий, чтобы избежать возможных конфликтов. Чтобы решить эту проблему, вам нужно интегрировать удаленные изменения в ваш локальный репозиторий перед выполнением команды git push.

Вам нужно выполнить два шага:

Обновление локального репозитория: Используйте команду git pull, чтобы получить последние изменения из удаленного репозитория и объединить их с вашим локальным кодом. Команда git pull автоматически скачивает изменения и объединяет их с вашим текущим рабочим состоянием.

		git pull origin master

Здесь origin - это имя удаленного репозитория, а master - это имя ветки. Вы можете заменить master на имя вашей текущей ветки, если она отличается.

Исправление возможных конфликтов: После выполнения git pull, Git автоматически попытается объединить изменения. Если возникнут конфликты, Git сообщит вам об этом. Вам нужно будет разрешить эти конфликты в вашем коде вручную. Откройте файлы, помеченные как "CONFLICT" в них, разрешите конфликты, сохраните изменения и сделайте коммит.

После того как вы разрешили все конфликты и сделали коммит, вы можете выполнить git push, чтобы отправить обновленные изменения на удаленный репозиторий.

		git push origin master

Если у вас есть права на запись в удаленный репозиторий, команда git push должна успешно выполниться, и ваши изменения будут отправлены на GitHub.

через Visual Studio Code (VS Code) работать проще 

HEAD -- это голова.
Коммит -- это всему голова.
Статусы файлов:
<тут пустая строка!>

```mermaid
%% описание схемы
```
<и тут пустая строка!> 